const int pinA = 12;
const int pinB = 10;
const int pinC = 9;
const int pinD = 8;
const int pinE = 7;
const int pinF = 6;
const int pinG = 5;
const int pinDP = 4;

const int pinSW = 2;
const int pinX = A0;
const int pinY = A1;
const int pinBuzzer = 13;

const int segSize = 8;
int index = 7;
bool commonAnode = false;
const int noOfDigits = 10;
byte state = HIGH;
byte dpState = LOW;
byte swState = LOW;
byte lastSwState = LOW;
int xValue = 0;
int yValue = 0;

bool joyMoved = false;
int digit = 0;
int minThreshold = 400;
int maxThreshold = 600;

int segments[segSize] = { 
  pinA, pinB, pinC, pinD, pinE, pinF, pinG, pinDP
};

byte digitMatrix[noOfDigits][segSize - 1] = {
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};

bool blinkState = true;
unsigned long previousMillis = 0;
const long blinkInterval = 500; 

void setup() {
  for (int i = 0; i < segSize; i++) {
    pinMode(segments[i], OUTPUT);
  }
  pinMode(pinSW, INPUT_PULLUP);
  pinMode(pinX, INPUT);
  pinMode(pinY, INPUT);
  pinMode(pinBuzzer, OUTPUT);  
  if (commonAnode == true) {
    state = !state;
  }
}

void loop() {
  xValue = analogRead(pinX);
  if (xValue < minThreshold && joyMoved == false) {
    moveLeft();
  }
  if (xValue > maxThreshold && joyMoved == false) {
    moveRight();
  }
  if (xValue >= minThreshold && xValue <= maxThreshold) {
    joyMoved = false;
  }

  swState = digitalRead(pinSW);
  if (swState != lastSwState) {
    if (swState == LOW) {
      if (checkLongPress()) {
        resetDisplay();
      } else {
        toggleSegmentState();
        blinkState = false; 
      }
    }
  }
  lastSwState = swState;
  blinkSegment(digit, dpState, blinkState);

  delay(1);
}

bool checkLongPress() {
  unsigned long startTime = millis();
  while (digitalRead(pinSW) == LOW) {
    if (millis() - startTime >= 3000) {
      return true;
    }
  }
  return false;
}

void resetDisplay() {
  blinkState = false;
  for (int i = 0; i < segSize; i++) {
    digitalWrite(segments[i], LOW);
  }
  index = segSize - 1;
  joyMoved = true;
}

void toggleSegmentState() {
  digitMatrix[digit][index] = !digitMatrix[digit][index];
}

void blinkSegment(byte digit, byte decimalPoint, bool state) {
  if (state) {
    displayNumber(digit, decimalPoint);
  } else {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= blinkInterval) {
      previousMillis = currentMillis;

      digitalWrite(segments[index], !digitalRead(segments[index]));

      if (!digitalRead(segments[index]) || !blinkState) {
        tone(pinBuzzer, 1000, 100);
      } else {
        noTone(pinBuzzer);
      }
    }
  }
}

void moveLeft() {
  if (index > 0) {
    index--;
  } else {
    index = segSize - 2;
  }
  joyMoved = true;
  blinkState = true;
}

void moveRight() {
  if (index < segSize - 2) {
    index++;
  } else {
    index = 0;
  }
  joyMoved = true;
  blinkState = true;
}

void displayNumber(byte digit, byte decimalPoint) {
  for (int i = 0; i < segSize - 1; i++) {
    digitalWrite(segments[i], digitMatrix[digit][i]);
  }

  digitalWrite(segments[segSize - 1], decimalPoint);
}
