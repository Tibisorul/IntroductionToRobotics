const int buttonPin1 = 4;
const int buttonPin2 = 3;
const int buttonPin3 = 2;
const int ledPin1 = 11;
const int ledPin2 = 10;
const int ledPin3 = 9;
const int buzzerPin = 7;
const int elevatorStatusLed = 12;

bool elevatorMoving = false;
int currentFloor = 1;
int targetFloor = 1;

bool ledState1 = false;
bool ledState2 = false;
bool ledState3 = false;

unsigned long previousMillis = 0;
const long buzzerInterval = 200;
const long ledInterval = 500;

void setup() {
  pinMode(buttonPin1, INPUT_PULLUP);
  pinMode(buttonPin2, INPUT_PULLUP);
  pinMode(buttonPin3, INPUT_PULLUP);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(elevatorStatusLed, OUTPUT);
  Serial.begin(9600);
}

void playBuzzer(int duration, int frequency) {
  unsigned long startTime = millis();
  while (millis() - startTime < duration) {
    tone(buzzerPin, frequency);
  }
  noTone(buzzerPin);
}

void elevatorArrivedSound() {
  playBuzzer(200, 1000);
}

void doorClosedSound() {
  playBuzzer(200, 1500);
}

void updateLED(int buttonState, int ledPin, bool &ledState, int otherLedPin1, bool &otherLedState1, int otherLedPin2, bool &otherLedState2) {
  if (buttonState == LOW && !elevatorMoving) {
    if (otherLedPin1 != ledPin) {
      digitalWrite(otherLedPin1, LOW);
      otherLedState1 = false;
    }
    if (otherLedPin2 != ledPin) {
      digitalWrite(otherLedPin2, LOW);
      otherLedState2 = false;
    }

    digitalWrite(ledPin, HIGH);
    ledState = true;
    playBuzzer(200, 1000);
    unsigned long startTime = millis();
    while (millis() - startTime < 500) {
    }
  } else if (!elevatorMoving && ledState) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
    ledState = false;
  }
}

void updateLED1(int buttonState, int ledPin, bool &ledState) {
  updateLED(buttonState, ledPin, ledState, ledPin2, ledState2, ledPin3, ledState3);
}

void updateLED2(int buttonState, int ledPin, bool &ledState) {
  updateLED(buttonState, ledPin, ledState, ledPin1, ledState1, ledPin3, ledState3);
}

void updateLED3(int buttonState, int ledPin, bool &ledState) {
  updateLED(buttonState, ledPin, ledState, ledPin1, ledState1, ledPin2, ledState2);
}

void updateButtonLEDs() {
  digitalWrite(ledPin1, ledState1);
  digitalWrite(ledPin2, ledState2);
  digitalWrite(ledPin3, ledState3);
}

void updateOperationalLED() {
  if (elevatorMoving) {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= ledInterval) {
      previousMillis = currentMillis;
      digitalWrite(elevatorStatusLed, !digitalRead(elevatorStatusLed));
    }
  } else {
    digitalWrite(elevatorStatusLed, HIGH);
  }
}

void moveElevator() {
  Serial.println("Liftul se deplaseazÄƒ de la etajul " + String(currentFloor) + " la etajul " + String(targetFloor) + "...");
  
  int travelTime = 1000;
  
  int floorDifference = abs(targetFloor - currentFloor);
  if ((currentFloor == 1 && targetFloor == 3) || (currentFloor == 3 && targetFloor == 1)) {
    travelTime += floorDifference * 1500; 
  } else {
    travelTime += floorDifference * 500;
  }
  
  unsigned long startTime = millis();

  while (millis() - startTime < travelTime) {
    updateOperationalLED();
  }
  
  Serial.println("Liftul a ajuns la etajul " + String(targetFloor));
  elevatorArrivedSound();
  playBuzzer(200, 1000);

  doorClosedSound();

  elevatorMoving = false;
  currentFloor = targetFloor;

  updateButtonLEDs();

  digitalWrite(elevatorStatusLed, HIGH);
}



void loop() {
  int buttonState1 = digitalRead(buttonPin1);
  int buttonState2 = digitalRead(buttonPin2);
  int buttonState3 = digitalRead(buttonPin3);

  if (buttonState1 == LOW && !elevatorMoving) {
    if (targetFloor != 1) {
      updateOperationalLED();
      targetFloor = 1;
      elevatorMoving = true;
      moveElevator();
    } else {
      playBuzzer(200, 500);
    }
  } else if (buttonState3 == LOW && !elevatorMoving) {
    if (targetFloor != 3) {
      updateOperationalLED();
      targetFloor = 3;
      elevatorMoving = true;
      moveElevator();
    } else {
      playBuzzer(200, 500); 
    }
  } else if (buttonState2 == LOW && !elevatorMoving) {
    if (targetFloor != 2) {
      updateOperationalLED();
      targetFloor = 2;
      elevatorMoving = true;
      moveElevator();
    } else {
      playBuzzer(200, 500);
    }
  }

  updateLED1(buttonState1, ledPin1, ledState1);
  updateLED2(buttonState2, ledPin2, ledState2);
  updateLED3(buttonState3, ledPin3, ledState3);

  Serial.print("Button 1: ");
  Serial.print(buttonState1);
  Serial.print(" | Button 2: ");
  Serial.print(buttonState2);
  Serial.print(" | Button 3: ");
  Serial.println(buttonState3);
}

