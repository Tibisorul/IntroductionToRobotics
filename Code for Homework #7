#include "LedControl.h"

#define EMPTY 0
#define PLAYER_TYPE 1
#define BULLET_TYPE 2
#define WALL 3

#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
#define NONE 4

struct Bullet
{
  byte x;
  byte y;
  bool state;
  byte direction;
};

struct Player
{
  byte x;
  byte y;
  bool state;
  byte lastDirection;
};

const int greenLedPin = 4;
const int ledPin = 3;
const int buzzerPin = 8;
const int maxBullets = 10;
Bullet bullets[maxBullets];
int bulletCount = 0;

const byte dinPin = 12;
const byte clockPin = 11;
const byte loadPin = 10;
const byte matrixSize = 8;
LedControl lc = LedControl(dinPin, clockPin, loadPin, 1);

byte a[matrixSize][matrixSize] = {EMPTY};

Player player = {4, 4, true, UP};

unsigned long bulletBlinkPeriodFrame = 100;
unsigned long playerBlinkPeriodFrame = 50;
unsigned long lastBlinkTime = 0;

const int joystickX = A0;
const int joystickY = A1;
int joystickCenter = 512;
int joystickDeadZone = 100;
bool joystickCentered = true;

byte matrixBrightness = 2;
unsigned long currentFrame = 0;

void setup()
{
  pinMode(greenLedPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  randomSeed(analogRead(0));
  pinMode(2, INPUT_PULLUP);
  lc.shutdown(0, false);
  lc.setIntensity(0, matrixBrightness);
  lc.clearDisplay(0);
  a[player.x][player.y] = PLAYER_TYPE;
  initializeWalls();
}

void refreshDisplay()
{
  currentFrame++;
  for (int i = 0; i < matrixSize; i++)
  {
    for (int j = 0; j < matrixSize; j++)
    {
      updateLedState(i, j);
    }
  }
}

void updateLedState(int row, int col)
{
  bool state = determineLedState(a[row][col]);
  lc.setLed(0, row, col, state);
}

bool determineLedState(byte matrixElement)
{
  switch (matrixElement)
  {
  case PLAYER_TYPE:
    return updatePlayerBlinkState();
  case BULLET_TYPE:
    return true;
  case WALL:
    return true;
  default:
    return false;
  }
}

bool updatePlayerBlinkState()
{
  player.state = (currentFrame / playerBlinkPeriodFrame) % 2 == 0;
  return player.state;
}

void fireBullet()
{
  if (bulletCount >= maxBullets)
    return;

  Bullet createdBullet;
  createdBullet.x = player.x;
  createdBullet.y = player.y;
  createdBullet.direction = player.lastDirection;

  setBulletInitialPosition(&createdBullet);

  if (isPositionEmpty(createdBullet.x, createdBullet.y))
  {
    a[createdBullet.y][createdBullet.x] = BULLET_TYPE;
    bullets[bulletCount++] = createdBullet;
    tone(buzzerPin, 250, 100);
    digitalWrite(ledPin, HIGH);
    delay(100);
    digitalWrite(ledPin, LOW);
  }
}

void setBulletInitialPosition(Bullet *bullet)
{
  switch (bullet->direction)
  {
  case UP:
    bullet->y = max(0, bullet->y - 1);
    break;
  case DOWN:
    bullet->y = min(matrixSize - 1, bullet->y + 1);
    break;
  case LEFT:
    bullet->x = max(0, bullet->x - 1);
    break;
  case RIGHT:
    bullet->x = min(matrixSize - 1, bullet->x + 1);
    break;
  default:
    break;
  }
}

bool isPositionEmpty(int x, int y)
{
  return a[y][x] == EMPTY;
}

void initializeWalls()
{
  for (int row = 0; row < matrixSize; row++)
  {
    for (int col = 0; col < matrixSize; col++)
    {
      if (random(5) == 0)
      {
        a[row][col] = WALL;
      }
    }
  }
  a[player.x][player.y] = EMPTY;
}

void updateBulletPositions()
{
  for (int index = 0; index < bulletCount; index++)
  {
    int targetX = bullets[index].x;
    int targetY = bullets[index].y;

    if (bullets[index].direction == UP)
      targetY--;
    else if (bullets[index].direction == DOWN)
      targetY++;
    else if (bullets[index].direction == LEFT)
      targetX--;
    else if (bullets[index].direction == RIGHT)
      targetX++;

    if (isValidPosition(targetX, targetY))
    {
      if (a[targetY][targetX] == WALL)
      {
        a[targetY][targetX] = EMPTY;
        removeBullet(index);
        index--;
        digitalWrite(greenLedPin, HIGH);
        delay(100);
        digitalWrite(greenLedPin, LOW);
      }
      else if (a[targetY][targetX] == EMPTY)
      {
        a[bullets[index].y][bullets[index].x] = EMPTY;
        bullets[index].x = targetX;
        bullets[index].y = targetY;
        a[targetY][targetX] = BULLET_TYPE;
      }
    }
    else
    {
      removeBullet(index);
      index--;
    }
  }
}

bool isValidPosition(int x, int y)
{
  return x >= 0 && x < matrixSize && y >= 0 && y < matrixSize;
}

void removeBullet(int bulletIndex)
{
  a[bullets[bulletIndex].y][bullets[bulletIndex].x] = EMPTY;
  for (int j = bulletIndex; j < bulletCount - 1; j++)
  {
    bullets[j] = bullets[j + 1];
  }
  bulletCount--;
}

int lastShootTime = 0;
int lastFrameTime = 0;
const int periodOfFrames = 10;
unsigned long lastPlayerMoveTime = 0;
const unsigned long playerMovePeriod = 200;

void loop()
{
  unsigned long currentTime = millis();

  if (currentTime - lastFrameTime < periodOfFrames)
    return;

  lastFrameTime = currentTime;

  int xVal = analogRead(joystickX) - joystickCenter;
  int yVal = analogRead(joystickY) - joystickCenter;

  if ((abs(xVal) > joystickDeadZone || abs(yVal) > joystickDeadZone) && (currentTime - lastPlayerMoveTime > playerMovePeriod))
  {
    byte newX = player.x;
    byte newY = player.y;

    if (abs(xVal) > joystickDeadZone)
    {
      if (xVal < 0 && player.x > 0)
      {
        newX = player.x - 1;
      }
      else if (xVal > 0 && player.x < matrixSize - 1)
      {
        newX = player.x + 1;
      }
    }

    if (abs(yVal) > joystickDeadZone)
    {
      if (yVal < 0 && player.y > 0)
      {
        newY = player.y - 1;
      }
      else if (yVal > 0 && player.y < matrixSize - 1)
      {
        newY = player.y + 1;
      }
    }

    if (newX != player.x || newY != player.y)
    {
      player.lastDirection = newX > player.x ? RIGHT : newX < player.x ? LEFT : newY > player.y ? DOWN : UP;
      a[player.y][player.x] = EMPTY;
      player.x = newX;
      player.y = newY;
      a[player.y][player.x] = PLAYER_TYPE;
      lastPlayerMoveTime = currentTime;
    }
  }

  refreshDisplay();
  updateBulletPositions();

  if (digitalRead(2) == LOW && currentTime - lastShootTime > 200)
  {
    fireBullet();
    lastShootTime = currentTime;
  }
}
